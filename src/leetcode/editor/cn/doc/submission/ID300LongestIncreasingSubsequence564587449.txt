    class Solution {
        public int lengthOfLIS(int[] nums) {
            // dp[i]表示i之前包括i的以nums[i]结尾的最长递增子序列的长度
            int[] dp = new int[nums.length];
            int max = -1;
            Arrays.fill(nums,1);
            for (int i = 1; i < nums.length; i++) {
                for (int j = 0; j < i; j++) {
                    if (nums[j]<nums[i]){
                        // dp[i] 是 0 - i-1 中最大的长度 + 1
                        dp[i] = Math.max(dp[i],dp[j]+1);
                    }
                    max = Math.max(max,dp[i]);
                }
            }
            return max;
        }
    }

//total_testcases:55
//total_correct:0
//input_formatted:[10,9,2,5,3,7,101,18]
//expected_output:4
//code_output:0
//last_testcase:[10,9,2,5,3,7,101,18]
